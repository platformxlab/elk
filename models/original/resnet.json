[
  [
    136,
    " - einstein_v2(\" output0[N0, N1] = input0[N1] where N0 in 99; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1000]} })  ",
    "Broadcast",
    [
      [
        1,
        0
      ]
    ]
  ],
  [
    131,
    " - einstein_v2(\" output0[N0, N1] = input0[0] where N0 in 99, N1 in 512; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} })  ",
    "Broadcast",
    [
      [
        130,
        0
      ]
    ]
  ],
  [
    116,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 7, N3 in 7; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [512]} })  ",
    "Broadcast",
    [
      [
        37,
        0
      ]
    ]
  ],
  [
    95,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 14, N3 in 14; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [256]} })  ",
    "Broadcast",
    [
      [
        27,
        0
      ]
    ]
  ],
  [
    74,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 28, N3 in 28; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [128]} })  ",
    "Broadcast",
    [
      [
        17,
        0
      ]
    ]
  ],
  [
    44,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 112, N3 in 112; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [64]} })  ",
    "Broadcast",
    [
      [
        3,
        0
      ]
    ]
  ],
  [
    43,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -3 + KH * 1 + HO * 2, -3 + KW * 1 + WO * 2].when([-3 + KH * 1 + HO * 2 >= 0, -3 + KH * 1 + HO * 2 < 224, -3 + KW * 1 + WO * 2 >= 0, -3 + KW * 1 + WO * 2 < 224], const(0.0).cast(input0[N, C, -3 + KH * 1 + HO * 2, -3 + KW * 1 + WO * 2].dtype())) * input1[F, C, KH, KW] where HO in 112, WO in 112; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 3, 224, 224]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [64, 3, 7, 7]} })  ",
    "Convolution",
    [
      [
        42,
        0
      ],
      [
        2,
        0
      ]
    ]
  ],
  [
    45,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 112, 112]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 112, 112]} })  ",
    "Add",
    [
      [
        43,
        0
      ],
      [
        44,
        0
      ]
    ]
  ],
  [
    46,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3].call(`max`, [const(0).cast(input0[N0, N1, N2, N3].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 112, 112]} })  ",
    "Relu",
    [
      [
        45,
        0
      ]
    ]
  ],
  [
    47,
    " - einstein_v2(\" output0[N, C, D0, D1] >=! input0[N, C, D0 * 2 + K0 - 1, D1 * 2 + K1 - 1].when([D0 * 2 + K0 - 1 >=0 , D0 * 2 + K0 - 1 < 112 , D1 * 2 + K1 - 1 >=0 , D1 * 2 + K1 - 1 < 112], const(-3.4e38).cast(input0.dtype())) where D0 in 56, K0 in 3 , D1 in 56, K1 in 3; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 112, 112]} })  ",
    "MaxPool",
    [
      [
        46,
        0
      ]
    ]
  ],
  [
    53,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 56, N3 in 56; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [64]} })  ",
    "Broadcast",
    [
      [
        7,
        0
      ]
    ]
  ],
  [
    49,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 56, N3 in 56; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [64]} })  ",
    "Broadcast",
    [
      [
        5,
        0
      ]
    ]
  ],
  [
    48,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].when([-1 + KH * 1 + HO * 1 >= 0, -1 + KH * 1 + HO * 1 < 56, -1 + KW * 1 + WO * 1 >= 0, -1 + KW * 1 + WO * 1 < 56], const(0.0).cast(input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].dtype())) * input1[F, C, KH, KW] where HO in 56, WO in 56; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [64, 64, 3, 3]} })  ",
    "Convolution",
    [
      [
        47,
        0
      ],
      [
        4,
        0
      ]
    ]
  ],
  [
    50,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} })  ",
    "Add",
    [
      [
        48,
        0
      ],
      [
        49,
        0
      ]
    ]
  ],
  [
    51,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3].call(`max`, [const(0).cast(input0[N0, N1, N2, N3].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} })  ",
    "Relu",
    [
      [
        50,
        0
      ]
    ]
  ],
  [
    52,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].when([-1 + KH * 1 + HO * 1 >= 0, -1 + KH * 1 + HO * 1 < 56, -1 + KW * 1 + WO * 1 >= 0, -1 + KW * 1 + WO * 1 < 56], const(0.0).cast(input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].dtype())) * input1[F, C, KH, KW] where HO in 56, WO in 56; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [64, 64, 3, 3]} })  ",
    "Convolution",
    [
      [
        51,
        0
      ],
      [
        6,
        0
      ]
    ]
  ],
  [
    54,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} })  ",
    "Add",
    [
      [
        52,
        0
      ],
      [
        53,
        0
      ]
    ]
  ],
  [
    55,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} })  ",
    "Add",
    [
      [
        54,
        0
      ],
      [
        47,
        0
      ]
    ]
  ],
  [
    56,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3].call(`max`, [const(0).cast(input0[N0, N1, N2, N3].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} })  ",
    "Relu",
    [
      [
        55,
        0
      ]
    ]
  ],
  [
    62,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 56, N3 in 56; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [64]} })  ",
    "Broadcast",
    [
      [
        11,
        0
      ]
    ]
  ],
  [
    58,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 56, N3 in 56; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [64]} })  ",
    "Broadcast",
    [
      [
        9,
        0
      ]
    ]
  ],
  [
    57,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].when([-1 + KH * 1 + HO * 1 >= 0, -1 + KH * 1 + HO * 1 < 56, -1 + KW * 1 + WO * 1 >= 0, -1 + KW * 1 + WO * 1 < 56], const(0.0).cast(input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].dtype())) * input1[F, C, KH, KW] where HO in 56, WO in 56; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [64, 64, 3, 3]} })  ",
    "Convolution",
    [
      [
        56,
        0
      ],
      [
        8,
        0
      ]
    ]
  ],
  [
    59,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} })  ",
    "Add",
    [
      [
        57,
        0
      ],
      [
        58,
        0
      ]
    ]
  ],
  [
    60,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3].call(`max`, [const(0).cast(input0[N0, N1, N2, N3].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} })  ",
    "Relu",
    [
      [
        59,
        0
      ]
    ]
  ],
  [
    61,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].when([-1 + KH * 1 + HO * 1 >= 0, -1 + KH * 1 + HO * 1 < 56, -1 + KW * 1 + WO * 1 >= 0, -1 + KW * 1 + WO * 1 < 56], const(0.0).cast(input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].dtype())) * input1[F, C, KH, KW] where HO in 56, WO in 56; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [64, 64, 3, 3]} })  ",
    "Convolution",
    [
      [
        60,
        0
      ],
      [
        10,
        0
      ]
    ]
  ],
  [
    63,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} })  ",
    "Add",
    [
      [
        61,
        0
      ],
      [
        62,
        0
      ]
    ]
  ],
  [
    64,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} })  ",
    "Add",
    [
      [
        63,
        0
      ],
      [
        56,
        0
      ]
    ]
  ],
  [
    65,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3].call(`max`, [const(0).cast(input0[N0, N1, N2, N3].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} })  ",
    "Relu",
    [
      [
        64,
        0
      ]
    ]
  ],
  [
    73,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -0 + KH * 1 + HO * 2, -0 + KW * 1 + WO * 2] * input1[F, C, KH, KW] where HO in 28, WO in 28; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [128, 64, 1, 1]} })  ",
    "Convolution",
    [
      [
        65,
        0
      ],
      [
        16,
        0
      ]
    ]
  ],
  [
    75,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} })  ",
    "Add",
    [
      [
        73,
        0
      ],
      [
        74,
        0
      ]
    ]
  ],
  [
    71,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 28, N3 in 28; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [128]} })  ",
    "Broadcast",
    [
      [
        15,
        0
      ]
    ]
  ],
  [
    67,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 28, N3 in 28; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [128]} })  ",
    "Broadcast",
    [
      [
        13,
        0
      ]
    ]
  ],
  [
    66,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -1 + KH * 1 + HO * 2, -1 + KW * 1 + WO * 2].when([-1 + KH * 1 + HO * 2 >= 0, -1 + KH * 1 + HO * 2 < 56, -1 + KW * 1 + WO * 2 >= 0, -1 + KW * 1 + WO * 2 < 56], const(0.0).cast(input0[N, C, -1 + KH * 1 + HO * 2, -1 + KW * 1 + WO * 2].dtype())) * input1[F, C, KH, KW] where HO in 28, WO in 28; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 64, 56, 56]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [128, 64, 3, 3]} })  ",
    "Convolution",
    [
      [
        65,
        0
      ],
      [
        12,
        0
      ]
    ]
  ],
  [
    68,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} })  ",
    "Add",
    [
      [
        66,
        0
      ],
      [
        67,
        0
      ]
    ]
  ],
  [
    69,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3].call(`max`, [const(0).cast(input0[N0, N1, N2, N3].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} })  ",
    "Relu",
    [
      [
        68,
        0
      ]
    ]
  ],
  [
    70,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].when([-1 + KH * 1 + HO * 1 >= 0, -1 + KH * 1 + HO * 1 < 28, -1 + KW * 1 + WO * 1 >= 0, -1 + KW * 1 + WO * 1 < 28], const(0.0).cast(input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].dtype())) * input1[F, C, KH, KW] where HO in 28, WO in 28; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [128, 128, 3, 3]} })  ",
    "Convolution",
    [
      [
        69,
        0
      ],
      [
        14,
        0
      ]
    ]
  ],
  [
    72,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} })  ",
    "Add",
    [
      [
        70,
        0
      ],
      [
        71,
        0
      ]
    ]
  ],
  [
    76,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} })  ",
    "Add",
    [
      [
        72,
        0
      ],
      [
        75,
        0
      ]
    ]
  ],
  [
    77,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3].call(`max`, [const(0).cast(input0[N0, N1, N2, N3].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} })  ",
    "Relu",
    [
      [
        76,
        0
      ]
    ]
  ],
  [
    83,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 28, N3 in 28; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [128]} })  ",
    "Broadcast",
    [
      [
        21,
        0
      ]
    ]
  ],
  [
    79,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 28, N3 in 28; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [128]} })  ",
    "Broadcast",
    [
      [
        19,
        0
      ]
    ]
  ],
  [
    78,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].when([-1 + KH * 1 + HO * 1 >= 0, -1 + KH * 1 + HO * 1 < 28, -1 + KW * 1 + WO * 1 >= 0, -1 + KW * 1 + WO * 1 < 28], const(0.0).cast(input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].dtype())) * input1[F, C, KH, KW] where HO in 28, WO in 28; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [128, 128, 3, 3]} })  ",
    "Convolution",
    [
      [
        77,
        0
      ],
      [
        18,
        0
      ]
    ]
  ],
  [
    80,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} })  ",
    "Add",
    [
      [
        78,
        0
      ],
      [
        79,
        0
      ]
    ]
  ],
  [
    81,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3].call(`max`, [const(0).cast(input0[N0, N1, N2, N3].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} })  ",
    "Relu",
    [
      [
        80,
        0
      ]
    ]
  ],
  [
    82,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].when([-1 + KH * 1 + HO * 1 >= 0, -1 + KH * 1 + HO * 1 < 28, -1 + KW * 1 + WO * 1 >= 0, -1 + KW * 1 + WO * 1 < 28], const(0.0).cast(input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].dtype())) * input1[F, C, KH, KW] where HO in 28, WO in 28; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [128, 128, 3, 3]} })  ",
    "Convolution",
    [
      [
        81,
        0
      ],
      [
        20,
        0
      ]
    ]
  ],
  [
    84,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} })  ",
    "Add",
    [
      [
        82,
        0
      ],
      [
        83,
        0
      ]
    ]
  ],
  [
    85,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} })  ",
    "Add",
    [
      [
        84,
        0
      ],
      [
        77,
        0
      ]
    ]
  ],
  [
    86,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3].call(`max`, [const(0).cast(input0[N0, N1, N2, N3].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} })  ",
    "Relu",
    [
      [
        85,
        0
      ]
    ]
  ],
  [
    94,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -0 + KH * 1 + HO * 2, -0 + KW * 1 + WO * 2] * input1[F, C, KH, KW] where HO in 14, WO in 14; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [256, 128, 1, 1]} })  ",
    "Convolution",
    [
      [
        86,
        0
      ],
      [
        26,
        0
      ]
    ]
  ],
  [
    96,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} })  ",
    "Add",
    [
      [
        94,
        0
      ],
      [
        95,
        0
      ]
    ]
  ],
  [
    92,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 14, N3 in 14; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [256]} })  ",
    "Broadcast",
    [
      [
        25,
        0
      ]
    ]
  ],
  [
    88,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 14, N3 in 14; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [256]} })  ",
    "Broadcast",
    [
      [
        23,
        0
      ]
    ]
  ],
  [
    87,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -1 + KH * 1 + HO * 2, -1 + KW * 1 + WO * 2].when([-1 + KH * 1 + HO * 2 >= 0, -1 + KH * 1 + HO * 2 < 28, -1 + KW * 1 + WO * 2 >= 0, -1 + KW * 1 + WO * 2 < 28], const(0.0).cast(input0[N, C, -1 + KH * 1 + HO * 2, -1 + KW * 1 + WO * 2].dtype())) * input1[F, C, KH, KW] where HO in 14, WO in 14; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 128, 28, 28]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [256, 128, 3, 3]} })  ",
    "Convolution",
    [
      [
        86,
        0
      ],
      [
        22,
        0
      ]
    ]
  ],
  [
    89,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} })  ",
    "Add",
    [
      [
        87,
        0
      ],
      [
        88,
        0
      ]
    ]
  ],
  [
    90,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3].call(`max`, [const(0).cast(input0[N0, N1, N2, N3].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} })  ",
    "Relu",
    [
      [
        89,
        0
      ]
    ]
  ],
  [
    91,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].when([-1 + KH * 1 + HO * 1 >= 0, -1 + KH * 1 + HO * 1 < 14, -1 + KW * 1 + WO * 1 >= 0, -1 + KW * 1 + WO * 1 < 14], const(0.0).cast(input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].dtype())) * input1[F, C, KH, KW] where HO in 14, WO in 14; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [256, 256, 3, 3]} })  ",
    "Convolution",
    [
      [
        90,
        0
      ],
      [
        24,
        0
      ]
    ]
  ],
  [
    93,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} })  ",
    "Add",
    [
      [
        91,
        0
      ],
      [
        92,
        0
      ]
    ]
  ],
  [
    97,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} })  ",
    "Add",
    [
      [
        93,
        0
      ],
      [
        96,
        0
      ]
    ]
  ],
  [
    98,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3].call(`max`, [const(0).cast(input0[N0, N1, N2, N3].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} })  ",
    "Relu",
    [
      [
        97,
        0
      ]
    ]
  ],
  [
    104,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 14, N3 in 14; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [256]} })  ",
    "Broadcast",
    [
      [
        31,
        0
      ]
    ]
  ],
  [
    100,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 14, N3 in 14; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [256]} })  ",
    "Broadcast",
    [
      [
        29,
        0
      ]
    ]
  ],
  [
    99,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].when([-1 + KH * 1 + HO * 1 >= 0, -1 + KH * 1 + HO * 1 < 14, -1 + KW * 1 + WO * 1 >= 0, -1 + KW * 1 + WO * 1 < 14], const(0.0).cast(input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].dtype())) * input1[F, C, KH, KW] where HO in 14, WO in 14; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [256, 256, 3, 3]} })  ",
    "Convolution",
    [
      [
        98,
        0
      ],
      [
        28,
        0
      ]
    ]
  ],
  [
    101,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} })  ",
    "Add",
    [
      [
        99,
        0
      ],
      [
        100,
        0
      ]
    ]
  ],
  [
    102,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3].call(`max`, [const(0).cast(input0[N0, N1, N2, N3].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} })  ",
    "Relu",
    [
      [
        101,
        0
      ]
    ]
  ],
  [
    103,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].when([-1 + KH * 1 + HO * 1 >= 0, -1 + KH * 1 + HO * 1 < 14, -1 + KW * 1 + WO * 1 >= 0, -1 + KW * 1 + WO * 1 < 14], const(0.0).cast(input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].dtype())) * input1[F, C, KH, KW] where HO in 14, WO in 14; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [256, 256, 3, 3]} })  ",
    "Convolution",
    [
      [
        102,
        0
      ],
      [
        30,
        0
      ]
    ]
  ],
  [
    105,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} })  ",
    "Add",
    [
      [
        103,
        0
      ],
      [
        104,
        0
      ]
    ]
  ],
  [
    106,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} })  ",
    "Add",
    [
      [
        105,
        0
      ],
      [
        98,
        0
      ]
    ]
  ],
  [
    107,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3].call(`max`, [const(0).cast(input0[N0, N1, N2, N3].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} })  ",
    "Relu",
    [
      [
        106,
        0
      ]
    ]
  ],
  [
    115,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -0 + KH * 1 + HO * 2, -0 + KW * 1 + WO * 2] * input1[F, C, KH, KW] where HO in 7, WO in 7; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [512, 256, 1, 1]} })  ",
    "Convolution",
    [
      [
        107,
        0
      ],
      [
        36,
        0
      ]
    ]
  ],
  [
    117,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} })  ",
    "Add",
    [
      [
        115,
        0
      ],
      [
        116,
        0
      ]
    ]
  ],
  [
    113,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 7, N3 in 7; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [512]} })  ",
    "Broadcast",
    [
      [
        35,
        0
      ]
    ]
  ],
  [
    109,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 7, N3 in 7; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [512]} })  ",
    "Broadcast",
    [
      [
        33,
        0
      ]
    ]
  ],
  [
    108,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -1 + KH * 1 + HO * 2, -1 + KW * 1 + WO * 2].when([-1 + KH * 1 + HO * 2 >= 0, -1 + KH * 1 + HO * 2 < 14, -1 + KW * 1 + WO * 2 >= 0, -1 + KW * 1 + WO * 2 < 14], const(0.0).cast(input0[N, C, -1 + KH * 1 + HO * 2, -1 + KW * 1 + WO * 2].dtype())) * input1[F, C, KH, KW] where HO in 7, WO in 7; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 256, 14, 14]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [512, 256, 3, 3]} })  ",
    "Convolution",
    [
      [
        107,
        0
      ],
      [
        32,
        0
      ]
    ]
  ],
  [
    110,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} })  ",
    "Add",
    [
      [
        108,
        0
      ],
      [
        109,
        0
      ]
    ]
  ],
  [
    111,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3].call(`max`, [const(0).cast(input0[N0, N1, N2, N3].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} })  ",
    "Relu",
    [
      [
        110,
        0
      ]
    ]
  ],
  [
    112,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].when([-1 + KH * 1 + HO * 1 >= 0, -1 + KH * 1 + HO * 1 < 7, -1 + KW * 1 + WO * 1 >= 0, -1 + KW * 1 + WO * 1 < 7], const(0.0).cast(input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].dtype())) * input1[F, C, KH, KW] where HO in 7, WO in 7; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [512, 512, 3, 3]} })  ",
    "Convolution",
    [
      [
        111,
        0
      ],
      [
        34,
        0
      ]
    ]
  ],
  [
    114,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} })  ",
    "Add",
    [
      [
        112,
        0
      ],
      [
        113,
        0
      ]
    ]
  ],
  [
    118,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} })  ",
    "Add",
    [
      [
        114,
        0
      ],
      [
        117,
        0
      ]
    ]
  ],
  [
    119,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3].call(`max`, [const(0).cast(input0[N0, N1, N2, N3].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} })  ",
    "Relu",
    [
      [
        118,
        0
      ]
    ]
  ],
  [
    125,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 7, N3 in 7; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [512]} })  ",
    "Broadcast",
    [
      [
        41,
        0
      ]
    ]
  ],
  [
    121,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N1] where N0 in 99, N2 in 7, N3 in 7; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [512]} })  ",
    "Broadcast",
    [
      [
        39,
        0
      ]
    ]
  ],
  [
    120,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].when([-1 + KH * 1 + HO * 1 >= 0, -1 + KH * 1 + HO * 1 < 7, -1 + KW * 1 + WO * 1 >= 0, -1 + KW * 1 + WO * 1 < 7], const(0.0).cast(input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].dtype())) * input1[F, C, KH, KW] where HO in 7, WO in 7; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [512, 512, 3, 3]} })  ",
    "Convolution",
    [
      [
        119,
        0
      ],
      [
        38,
        0
      ]
    ]
  ],
  [
    122,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} })  ",
    "Add",
    [
      [
        120,
        0
      ],
      [
        121,
        0
      ]
    ]
  ],
  [
    123,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3].call(`max`, [const(0).cast(input0[N0, N1, N2, N3].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} })  ",
    "Relu",
    [
      [
        122,
        0
      ]
    ]
  ],
  [
    124,
    " - einstein_v2(\" output0[N, F, HO, WO] +=! input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].when([-1 + KH * 1 + HO * 1 >= 0, -1 + KH * 1 + HO * 1 < 7, -1 + KW * 1 + WO * 1 >= 0, -1 + KW * 1 + WO * 1 < 7], const(0.0).cast(input0[N, C, -1 + KH * 1 + HO * 1, -1 + KW * 1 + WO * 1].dtype())) * input1[F, C, KH, KW] where HO in 7, WO in 7; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [512, 512, 3, 3]} })  ",
    "Convolution",
    [
      [
        123,
        0
      ],
      [
        40,
        0
      ]
    ]
  ],
  [
    126,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} })  ",
    "Add",
    [
      [
        124,
        0
      ],
      [
        125,
        0
      ]
    ]
  ],
  [
    127,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} })  ",
    "Add",
    [
      [
        126,
        0
      ],
      [
        119,
        0
      ]
    ]
  ],
  [
    128,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3].call(`max`, [const(0).cast(input0[N0, N1, N2, N3].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} })  ",
    "Relu",
    [
      [
        127,
        0
      ]
    ]
  ],
  [
    129,
    " - einstein_v2(\"output0[N0, N1] +=! input0[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 7, 7]} })  ",
    "Sum",
    [
      [
        128,
        0
      ]
    ]
  ],
  [
    132,
    " - einstein_v2(\"output0[N0, N1] = input0[N0, N1] / input1[N0, N1];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512]} })  ",
    "Divide",
    [
      [
        129,
        0
      ],
      [
        131,
        0
      ]
    ]
  ],
  [
    133,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1] where N2 in 1, N3 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        132,
        0
      ]
    ]
  ],
  [
    134,
    " - einstein_v2(\" output0[N0, N1] = input0[N0, N1, 0, 0] ;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512, 1, 1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        133,
        0
      ]
    ]
  ],
  [
    135,
    " - einstein_v2(\" output0[N, M] +=! input0[N, K] * input1[M, K]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 512]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1000, 512]} })  ",
    "Dot",
    [
      [
        134,
        0
      ],
      [
        0,
        0
      ]
    ]
  ],
  [
    137,
    " - einstein_v2(\" output0[N0, N1] = input0[N0, N1] + input1[N0, N1]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [99, 1000]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [99, 1000]} })  ",
    "Add",
    [
      [
        135,
        0
      ],
      [
        136,
        0
      ]
    ]
  ],
  [
    138,
    "",
    "Result",
    [
      [
        137,
        0
      ]
    ]
  ]
]
[
  [
    67,
    " - einstein_v2(\" output0[N0] = input0[0] where N0 in 8; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} })  ",
    "Broadcast",
    [
      [
        18,
        0
      ]
    ]
  ],
  [
    66,
    " - einstein_v2(\"output0[N0] = input0[N0] * input1[N0];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [8]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [8]} })  ",
    "Multiply",
    [
      [
        29,
        0
      ],
      [
        32,
        0
      ]
    ]
  ],
  [
    68,
    " - einstein_v2(\" output0[N0] = input0[N0] + input1[N0]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [8]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [8]} })  ",
    "Add",
    [
      [
        66,
        0
      ],
      [
        67,
        0
      ]
    ]
  ],
  [
    168,
    "",
    "Result",
    [
      [
        68,
        0
      ]
    ]
  ],
  [
    64,
    " - einstein_v2(\"output0[N0] = input0[N0].call(`sqrt`);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [8]} })  ",
    "Sqrt",
    [
      [
        29,
        0
      ]
    ]
  ],
  [
    65,
    " - einstein_v2(\"output0[N0] = input0[N0] * input1[N0];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [8]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [8]} })  ",
    "Multiply",
    [
      [
        64,
        0
      ],
      [
        32,
        0
      ]
    ]
  ],
  [
    69,
    " - einstein_v2(\"output0[N0] = input0[N0].call(`sqrt`);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [8]} })  ",
    "Sqrt",
    [
      [
        68,
        0
      ]
    ]
  ],
  [
    70,
    " - einstein_v2(\"output0[N0] = input0[N0] / input1[N0];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [8]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [8]} })  ",
    "Divide",
    [
      [
        65,
        0
      ],
      [
        69,
        0
      ]
    ]
  ],
  [
    71,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N0] where N1 in 1, N2 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [8]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        70,
        0
      ]
    ]
  ],
  [
    72,
    " - einstein_v2(\" output0[N0, N1] = input0[N1, 0, 0] where N0 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [8, 1, 1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        71,
        0
      ]
    ]
  ],
  [
    73,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1] where N2 in 512, N3 in 256; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8]} })  ",
    "Broadcast",
    [
      [
        72,
        0
      ]
    ]
  ],
  [
    74,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] * input1[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512, 256]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512, 256]} })  ",
    "Multiply",
    [
      [
        28,
        0
      ],
      [
        73,
        0
      ]
    ]
  ],
  [
    102,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N0] where N1 in 1, N2 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [8]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        69,
        0
      ]
    ]
  ],
  [
    103,
    " - einstein_v2(\" output0[N0, N1] = input0[N1, 0, 0] where N0 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [8, 1, 1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        102,
        0
      ]
    ]
  ],
  [
    104,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1] where N2 in 512, N3 in 256; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8]} })  ",
    "Broadcast",
    [
      [
        103,
        0
      ]
    ]
  ],
  [
    45,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N2] where N0 in 1, N1 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [2048]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        0,
        0
      ]
    ]
  ],
  [
    38,
    " - einstein_v2(\" output0[N0, N1] = input0[0] where N0 in 1, N1 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        37,
        0
      ]
    ]
  ],
  [
    33,
    " - einstein_v2(\" output0[N0, N1] = input0[0] where N0 in 1, N1 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        24,
        0
      ]
    ]
  ],
  [
    34,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N0, N1] where N2 in 2048; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1]} })  ",
    "Broadcast",
    [
      [
        33,
        0
      ]
    ]
  ],
  [
    35,
    " - einstein_v2(\"output0[N0, N1, N2] = input0[N0, N1, N2].call(`pow`, [input1[N0, N1, N2]]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} })  ",
    "Power",
    [
      [
        27,
        0
      ],
      [
        34,
        0
      ]
    ]
  ],
  [
    36,
    " - einstein_v2(\"output0[N0, N1] +=! input0[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} })  ",
    "Sum",
    [
      [
        35,
        0
      ]
    ]
  ],
  [
    39,
    " - einstein_v2(\"output0[N0, N1] = input0[N0, N1] / input1[N0, N1];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1]} })  ",
    "Divide",
    [
      [
        36,
        0
      ],
      [
        38,
        0
      ]
    ]
  ],
  [
    40,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[0, 0] where N0 in 1, N1 in 1, N2 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        39,
        0
      ]
    ]
  ],
  [
    41,
    " - einstein_v2(\"output0[N0, N1, N2] = input0[N0, N1, N2].call(`sqrt`);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 1]} })  ",
    "Sqrt",
    [
      [
        40,
        0
      ]
    ]
  ],
  [
    42,
    " - einstein_v2(\" output0[N0, N1] = input0[0, 0, 0] where N0 in 1, N1 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        41,
        0
      ]
    ]
  ],
  [
    43,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N0, N1] where N2 in 2048; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1]} })  ",
    "Broadcast",
    [
      [
        42,
        0
      ]
    ]
  ],
  [
    44,
    " - einstein_v2(\"output0[N0, N1, N2] = input0[N0, N1, N2] / input1[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} })  ",
    "Divide",
    [
      [
        27,
        0
      ],
      [
        43,
        0
      ]
    ]
  ],
  [
    46,
    " - einstein_v2(\"output0[N0, N1, N2] = input0[N0, N1, N2] * input1[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} })  ",
    "Multiply",
    [
      [
        44,
        0
      ],
      [
        45,
        0
      ]
    ]
  ],
  [
    95,
    " - einstein_v2(\" output0[S0, N, M] +=! input0[S0, N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [2048, 4096]} })  ",
    "Dot",
    [
      [
        46,
        0
      ],
      [
        3,
        0
      ]
    ]
  ],
  [
    96,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[0, 0, ((N1) * 512 + N2)] where N0 in 1, N1 in 8, N2 in 512, N3 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 4096]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        95,
        0
      ]
    ]
  ],
  [
    99,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[0, N1, N2, 0] where N0 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512, 1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        96,
        0
      ]
    ]
  ],
  [
    100,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2] where N3 in 256; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512]} })  ",
    "Broadcast",
    [
      [
        99,
        0
      ]
    ]
  ],
  [
    81,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N2] where N0 in 1, N1 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [256]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        31,
        0
      ]
    ]
  ],
  [
    82,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N2, N3] where N1 in 8; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 256]} })  ",
    "Broadcast",
    [
      [
        81,
        0
      ]
    ]
  ],
  [
    76,
    " - einstein_v2(\" output0[N0, N1] = input0[0] where N0 in 1, N1 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        16,
        0
      ]
    ]
  ],
  [
    77,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N0, N1] where N2 in 2048; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1]} })  ",
    "Broadcast",
    [
      [
        76,
        0
      ]
    ]
  ],
  [
    75,
    " - einstein_v2(\" output0[S0, N, M] +=! input0[S0, N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [2048, 2048]} })  ",
    "Dot",
    [
      [
        46,
        0
      ],
      [
        2,
        0
      ]
    ]
  ],
  [
    78,
    " - einstein_v2(\"output0[N0, N1, N2] = input0[N0, N1, N2] * input1[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} })  ",
    "Multiply",
    [
      [
        75,
        0
      ],
      [
        77,
        0
      ]
    ]
  ],
  [
    79,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[0, 0, ((N2) * 256 + N3)] where N0 in 1, N1 in 1, N2 in 8, N3 in 256;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        78,
        0
      ]
    ]
  ],
  [
    80,
    " - einstein_v2(\" output0[N0, N2, N1, N3] = input0[N0, N1, N2, N3] ; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 8, 256]} })  ",
    "Reshape",
    [
      [
        79,
        0
      ]
    ]
  ],
  [
    83,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] * input1[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} })  ",
    "Multiply",
    [
      [
        80,
        0
      ],
      [
        82,
        0
      ]
    ]
  ],
  [
    91,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N2] where N0 in 1, N1 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [256]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        30,
        0
      ]
    ]
  ],
  [
    92,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N2, N3] where N1 in 8; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 256]} })  ",
    "Broadcast",
    [
      [
        91,
        0
      ]
    ]
  ],
  [
    87,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0 + 0, N1 + 0, N2 + 0, N3 * 2 + 0] where N0 in 1 , N1 in 8 , N2 in 1 , N3 in 128; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} })  ",
    "Slice",
    [
      [
        80,
        0
      ]
    ]
  ],
  [
    88,
    " - einstein_v2(\" output0[N0, N1, N2, N3, N4] = input0[0, N1, 0, N3] where N0 in 1, N2 in 1, N4 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 128]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        87,
        0
      ]
    ]
  ],
  [
    84,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0 + 0, N1 + 0, N2 + 0, N3 * 2 + 1] where N0 in 1 , N1 in 8 , N2 in 1 , N3 in 128; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} })  ",
    "Slice",
    [
      [
        80,
        0
      ]
    ]
  ],
  [
    85,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = -input0[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 128]} })  ",
    "Negative",
    [
      [
        84,
        0
      ]
    ]
  ],
  [
    86,
    " - einstein_v2(\" output0[N0, N1, N2, N3, N4] = input0[0, N1, 0, N3] where N0 in 1, N2 in 1, N4 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 128]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        85,
        0
      ]
    ]
  ],
  [
    89,
    " - einstein_v2(\" output0[N0, N1, N2, N3, N4] =  input0[N0, N1, N2, N3, N4 - 0].when(N4 < 1, input1[N0, N1, N2, N3, N4 - 1])  where N4 in 2; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 128, 1]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 128, 1]} })  ",
    "Concat",
    [
      [
        86,
        0
      ],
      [
        88,
        0
      ]
    ]
  ],
  [
    90,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[0, N1, 0, N3 / 2 % 128, N3 / 1 % 2] where N0 in 1, N2 in 1, N3 in 256;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 128, 2]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        89,
        0
      ]
    ]
  ],
  [
    93,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] * input1[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} })  ",
    "Multiply",
    [
      [
        90,
        0
      ],
      [
        92,
        0
      ]
    ]
  ],
  [
    94,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} })  ",
    "Add",
    [
      [
        83,
        0
      ],
      [
        93,
        0
      ]
    ]
  ],
  [
    97,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[0, N1, 0, N2] where N0 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        94,
        0
      ]
    ]
  ],
  [
    98,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N3] where N2 in 512; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 256]} })  ",
    "Broadcast",
    [
      [
        97,
        0
      ]
    ]
  ],
  [
    101,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] * input1[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512, 256]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512, 256]} })  ",
    "Multiply",
    [
      [
        98,
        0
      ],
      [
        100,
        0
      ]
    ]
  ],
  [
    105,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] / input1[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512, 256]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512, 256]} })  ",
    "Divide",
    [
      [
        101,
        0
      ],
      [
        104,
        0
      ]
    ]
  ],
  [
    106,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512, 256]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512, 256]} })  ",
    "Add",
    [
      [
        74,
        0
      ],
      [
        105,
        0
      ]
    ]
  ],
  [
    167,
    "",
    "Result",
    [
      [
        106,
        0
      ]
    ]
  ],
  [
    130,
    " - einstein_v2(\" output0[N0, N1] = input0[0] where N0 in 1, N1 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        18,
        0
      ]
    ]
  ],
  [
    131,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N0, N1] where N2 in 2048; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1]} })  ",
    "Broadcast",
    [
      [
        130,
        0
      ]
    ]
  ],
  [
    132,
    " - einstein_v2(\"output0[N0, N1, N2] = input0[N0, N1, N2] * input1[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} })  ",
    "Multiply",
    [
      [
        27,
        0
      ],
      [
        131,
        0
      ]
    ]
  ],
  [
    125,
    " - einstein_v2(\" output0[S0, N, M] +=! input0[S0, N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [2048, 4096]} })  ",
    "Dot",
    [
      [
        46,
        0
      ],
      [
        4,
        0
      ]
    ]
  ],
  [
    126,
    " - einstein_v2(\"output0[N0, N1, N2] = const(1).cast(input0[N0, N1, N2].dtype()) / (const(1).cast(input0[N0, N1, N2].dtype()) + (-input0[N0, N1, N2]).call(`exp`));\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 4096]} })  ",
    "Sigmoid",
    [
      [
        125,
        0
      ]
    ]
  ],
  [
    127,
    " - einstein_v2(\"output0[N0, N1, N2] = input0[N0, N1, N2] * input1[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 4096]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 4096]} })  ",
    "Multiply",
    [
      [
        125,
        0
      ],
      [
        126,
        0
      ]
    ]
  ],
  [
    50,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N2] where N0 in 1, N1 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [256]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        31,
        0
      ]
    ]
  ],
  [
    51,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N2, N3] where N1 in 8; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 256]} })  ",
    "Broadcast",
    [
      [
        50,
        0
      ]
    ]
  ],
  [
    47,
    " - einstein_v2(\" output0[S0, N, M] +=! input0[S0, N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [2048, 2048]} })  ",
    "Dot",
    [
      [
        46,
        0
      ],
      [
        1,
        0
      ]
    ]
  ],
  [
    48,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[0, 0, ((N2) * 256 + N3)] where N0 in 1, N1 in 1, N2 in 8, N3 in 256;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        47,
        0
      ]
    ]
  ],
  [
    49,
    " - einstein_v2(\" output0[N0, N2, N1, N3] = input0[N0, N1, N2, N3] ; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 8, 256]} })  ",
    "Reshape",
    [
      [
        48,
        0
      ]
    ]
  ],
  [
    52,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] * input1[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} })  ",
    "Multiply",
    [
      [
        49,
        0
      ],
      [
        51,
        0
      ]
    ]
  ],
  [
    60,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N2] where N0 in 1, N1 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [256]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        30,
        0
      ]
    ]
  ],
  [
    61,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N2, N3] where N1 in 8; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 256]} })  ",
    "Broadcast",
    [
      [
        60,
        0
      ]
    ]
  ],
  [
    56,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0 + 0, N1 + 0, N2 + 0, N3 * 2 + 0] where N0 in 1 , N1 in 8 , N2 in 1 , N3 in 128; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} })  ",
    "Slice",
    [
      [
        49,
        0
      ]
    ]
  ],
  [
    57,
    " - einstein_v2(\" output0[N0, N1, N2, N3, N4] = input0[0, N1, 0, N3] where N0 in 1, N2 in 1, N4 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 128]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        56,
        0
      ]
    ]
  ],
  [
    53,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0 + 0, N1 + 0, N2 + 0, N3 * 2 + 1] where N0 in 1 , N1 in 8 , N2 in 1 , N3 in 128; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} })  ",
    "Slice",
    [
      [
        49,
        0
      ]
    ]
  ],
  [
    54,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = -input0[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 128]} })  ",
    "Negative",
    [
      [
        53,
        0
      ]
    ]
  ],
  [
    55,
    " - einstein_v2(\" output0[N0, N1, N2, N3, N4] = input0[0, N1, 0, N3] where N0 in 1, N2 in 1, N4 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 128]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        54,
        0
      ]
    ]
  ],
  [
    58,
    " - einstein_v2(\" output0[N0, N1, N2, N3, N4] =  input0[N0, N1, N2, N3, N4 - 0].when(N4 < 1, input1[N0, N1, N2, N3, N4 - 1])  where N4 in 2; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 128, 1]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 128, 1]} })  ",
    "Concat",
    [
      [
        55,
        0
      ],
      [
        57,
        0
      ]
    ]
  ],
  [
    59,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[0, N1, 0, N3 / 2 % 128, N3 / 1 % 2] where N0 in 1, N2 in 1, N3 in 256;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 128, 2]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        58,
        0
      ]
    ]
  ],
  [
    62,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] * input1[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} })  ",
    "Multiply",
    [
      [
        59,
        0
      ],
      [
        61,
        0
      ]
    ]
  ],
  [
    63,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} })  ",
    "Add",
    [
      [
        52,
        0
      ],
      [
        62,
        0
      ]
    ]
  ],
  [
    107,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[0, N1, 0, N2] where N0 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1, 256]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        63,
        0
      ]
    ]
  ],
  [
    108,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N3] where N2 in 512; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 256]} })  ",
    "Broadcast",
    [
      [
        107,
        0
      ]
    ]
  ],
  [
    109,
    " - einstein_v2(\"output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] * input1[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512, 256]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512, 256]} })  ",
    "Multiply",
    [
      [
        108,
        0
      ],
      [
        106,
        0
      ]
    ]
  ],
  [
    110,
    " - einstein_v2(\"output0[N0, N1, N2] +=! input0[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512, 256]} })  ",
    "Sum",
    [
      [
        109,
        0
      ]
    ]
  ],
  [
    116,
    " - einstein_v2(\" output0[N0] = input0[0] where N0 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        115,
        0
      ]
    ]
  ],
  [
    117,
    " - einstein_v2(\" output0[N0, N1] = input0[N0] where N1 in 8; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} })  ",
    "Broadcast",
    [
      [
        116,
        0
      ]
    ]
  ],
  [
    111,
    " - einstein_v2(\" output0[N0] = input0[0] where N0 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        24,
        0
      ]
    ]
  ],
  [
    112,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N0] where N1 in 8, N2 in 512; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} })  ",
    "Broadcast",
    [
      [
        111,
        0
      ]
    ]
  ],
  [
    113,
    " - einstein_v2(\"output0[N0, N1, N2] = input0[N0, N1, N2].call(`pow`, [input1[N0, N1, N2]]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512]} })  ",
    "Power",
    [
      [
        110,
        0
      ],
      [
        112,
        0
      ]
    ]
  ],
  [
    114,
    " - einstein_v2(\"output0[N0, N1] +=! input0[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512]} })  ",
    "Sum",
    [
      [
        113,
        0
      ]
    ]
  ],
  [
    118,
    " - einstein_v2(\"output0[N0, N1] = input0[N0, N1] / input1[N0, N1];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8]} })  ",
    "Divide",
    [
      [
        114,
        0
      ],
      [
        117,
        0
      ]
    ]
  ],
  [
    119,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[0, N1] where N0 in 1, N2 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        118,
        0
      ]
    ]
  ],
  [
    120,
    " - einstein_v2(\"output0[N0, N1, N2] = input0[N0, N1, N2].call(`sqrt`);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1]} })  ",
    "Sqrt",
    [
      [
        119,
        0
      ]
    ]
  ],
  [
    121,
    " - einstein_v2(\" output0[N0, N1] = input0[0, N1, 0] where N0 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        120,
        0
      ]
    ]
  ],
  [
    122,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N0, N1] where N2 in 512; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8]} })  ",
    "Broadcast",
    [
      [
        121,
        0
      ]
    ]
  ],
  [
    123,
    " - einstein_v2(\"output0[N0, N1, N2] = input0[N0, N1, N2] / input1[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512]} })  ",
    "Divide",
    [
      [
        110,
        0
      ],
      [
        122,
        0
      ]
    ]
  ],
  [
    124,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[0, N2 / 512 % 8, N2 / 1 % 512] where N0 in 1, N1 in 1, N2 in 4096;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 8, 512]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        123,
        0
      ]
    ]
  ],
  [
    128,
    " - einstein_v2(\"output0[N0, N1, N2] = input0[N0, N1, N2] * input1[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 4096]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 4096]} })  ",
    "Multiply",
    [
      [
        127,
        0
      ],
      [
        124,
        0
      ]
    ]
  ],
  [
    129,
    " - einstein_v2(\" output0[S0, N, M] +=! input0[S0, N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 4096]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [4096, 2048]} })  ",
    "Dot",
    [
      [
        128,
        0
      ],
      [
        8,
        0
      ]
    ]
  ],
  [
    133,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N0, N1, N2] + input1[N0, N1, N2]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} })  ",
    "Add",
    [
      [
        132,
        0
      ],
      [
        129,
        0
      ]
    ]
  ],
  [
    146,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N2] where N0 in 1, N1 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [2048]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        0,
        0
      ]
    ]
  ],
  [
    139,
    " - einstein_v2(\" output0[N0, N1] = input0[0] where N0 in 1, N1 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        138,
        0
      ]
    ]
  ],
  [
    134,
    " - einstein_v2(\" output0[N0, N1] = input0[0] where N0 in 1, N1 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        24,
        0
      ]
    ]
  ],
  [
    135,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N0, N1] where N2 in 2048; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1]} })  ",
    "Broadcast",
    [
      [
        134,
        0
      ]
    ]
  ],
  [
    136,
    " - einstein_v2(\"output0[N0, N1, N2] = input0[N0, N1, N2].call(`pow`, [input1[N0, N1, N2]]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} })  ",
    "Power",
    [
      [
        133,
        0
      ],
      [
        135,
        0
      ]
    ]
  ],
  [
    137,
    " - einstein_v2(\"output0[N0, N1] +=! input0[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} })  ",
    "Sum",
    [
      [
        136,
        0
      ]
    ]
  ],
  [
    140,
    " - einstein_v2(\"output0[N0, N1] = input0[N0, N1] / input1[N0, N1];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1]} })  ",
    "Divide",
    [
      [
        137,
        0
      ],
      [
        139,
        0
      ]
    ]
  ],
  [
    141,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[0, 0] where N0 in 1, N1 in 1, N2 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        140,
        0
      ]
    ]
  ],
  [
    142,
    " - einstein_v2(\"output0[N0, N1, N2] = input0[N0, N1, N2].call(`sqrt`);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 1]} })  ",
    "Sqrt",
    [
      [
        141,
        0
      ]
    ]
  ],
  [
    143,
    " - einstein_v2(\" output0[N0, N1] = input0[0, 0, 0] where N0 in 1, N1 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        142,
        0
      ]
    ]
  ],
  [
    144,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N0, N1] where N2 in 2048; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1]} })  ",
    "Broadcast",
    [
      [
        143,
        0
      ]
    ]
  ],
  [
    145,
    " - einstein_v2(\"output0[N0, N1, N2] = input0[N0, N1, N2] / input1[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} })  ",
    "Divide",
    [
      [
        133,
        0
      ],
      [
        144,
        0
      ]
    ]
  ],
  [
    147,
    " - einstein_v2(\"output0[N0, N1, N2] = input0[N0, N1, N2] * input1[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} })  ",
    "Multiply",
    [
      [
        145,
        0
      ],
      [
        146,
        0
      ]
    ]
  ],
  [
    148,
    " - einstein_v2(\" output0[N0, N1] = input0[0, 0, N1] where N0 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        147,
        0
      ]
    ]
  ],
  [
    149,
    " - einstein_v2(\" output0[N, M] +=! input0[N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 2048]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [2048, 4096]} })  ",
    "Dot",
    [
      [
        148,
        0
      ],
      [
        10,
        0
      ]
    ]
  ],
  [
    159,
    " - einstein_v2(\" output0[N0] = input0[0] where N0 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        23,
        0
      ]
    ]
  ],
  [
    160,
    " - einstein_v2(\" output0[N0, N1] = input0[N0] where N1 in 4096; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} })  ",
    "Broadcast",
    [
      [
        159,
        0
      ]
    ]
  ],
  [
    150,
    " - einstein_v2(\" output0[N, M] +=! input0[N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 2048]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [2048, 4096]} })  ",
    "Dot",
    [
      [
        148,
        0
      ],
      [
        11,
        0
      ]
    ]
  ],
  [
    155,
    " - einstein_v2(\" output0[N0] = input0[0] where N0 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        18,
        0
      ]
    ]
  ],
  [
    156,
    " - einstein_v2(\" output0[N0, N1] = input0[N0] where N1 in 4096; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} })  ",
    "Broadcast",
    [
      [
        155,
        0
      ]
    ]
  ],
  [
    151,
    " - einstein_v2(\" output0[N0] = input0[0] where N0 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        15,
        0
      ]
    ]
  ],
  [
    152,
    " - einstein_v2(\" output0[N0, N1] = input0[N0] where N1 in 4096; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} })  ",
    "Broadcast",
    [
      [
        151,
        0
      ]
    ]
  ],
  [
    153,
    " - einstein_v2(\"output0[N0, N1] = input0[N0, N1] / input1[N0, N1];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096]} })  ",
    "Divide",
    [
      [
        150,
        0
      ],
      [
        152,
        0
      ]
    ]
  ],
  [
    154,
    " - einstein_v2(\"output0[N0, N1] = input0[N0, N1].call(`erf`);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096]} })  ",
    "Erf",
    [
      [
        153,
        0
      ]
    ]
  ],
  [
    157,
    " - einstein_v2(\" output0[N0, N1] = input0[N0, N1] + input1[N0, N1]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096]} })  ",
    "Add",
    [
      [
        154,
        0
      ],
      [
        156,
        0
      ]
    ]
  ],
  [
    158,
    " - einstein_v2(\"output0[N0, N1] = input0[N0, N1] * input1[N0, N1];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096]} })  ",
    "Multiply",
    [
      [
        150,
        0
      ],
      [
        157,
        0
      ]
    ]
  ],
  [
    161,
    " - einstein_v2(\"output0[N0, N1] = input0[N0, N1] * input1[N0, N1];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096]} })  ",
    "Multiply",
    [
      [
        158,
        0
      ],
      [
        160,
        0
      ]
    ]
  ],
  [
    162,
    " - einstein_v2(\"output0[N0, N1] = input0[N0, N1] * input1[N0, N1];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096]} })  ",
    "Multiply",
    [
      [
        161,
        0
      ],
      [
        149,
        0
      ]
    ]
  ],
  [
    163,
    " - einstein_v2(\" output0[N, M] +=! input0[N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [4096, 2048]} })  ",
    "Dot",
    [
      [
        162,
        0
      ],
      [
        12,
        0
      ]
    ]
  ],
  [
    164,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[0, N2] where N0 in 1, N1 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 2048]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        163,
        0
      ]
    ]
  ],
  [
    165,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[N0, N1, N2] + input1[N0, N1, N2]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1, 2048]} })  ",
    "Add",
    [
      [
        133,
        0
      ],
      [
        164,
        0
      ]
    ]
  ],
  [
    166,
    "",
    "Result",
    [
      [
        165,
        0
      ]
    ]
  ]
]